From previous demo file:

```{r}
library(RMODFLOW)
library(ggplot2)
```

## Reading files

xxx

```{r}
dis <- read_dis('LOC_2011/input.dis')
bas <- read_bas('LOC_2011/input.bas',dis=dis)
plot(bas$ibound,i=75,dis=dis,bas=bas)
plot(bas$ibound,i=75,dis=dis,bas=bas,type='factor')
plot(bas$ibound,i=75,dis=dis,bas=bas,type='factor')+scale_fill_discrete(name='ibound',labels=c('constant head','active'))
plot(bas$ibound,i=75,dis=dis,type='factor')+scale_fill_discrete(labels=c(name='Legend','constant head','inactive','active'))
plot(bas$ibound,k=1,dis=dis,bas=bas)
plot(bas$ibound,k=1,dis=dis,bas=bas,type='factor')
plot(bas$ibound,k=1,dis=dis,bas=bas,type='factor')+scale_fill_discrete(name='ibound',labels=c('constant head','active'))
plot(bas$ibound,k=1,dis=dis,type='factor')+scale_fill_discrete(name='Legend',labels=c('constant head','inactive','active'))
hed <- read_hed('LOC_2011/output.hed',dis=dis,bas=bas)
bud <- read_bud('LOC_2011/output.bud')
```

Other reading functions currently implemented are `read_bas`, `read_bud`, `read_hed`, `read_hob`, `read_hpr`, `read_huf`, `read_kdep`, `read_mlt` and `read_pval`. For some of them, *dis* and *bas* objects are required as additional input (see the respective help files).

The `summary` method works perfectly for showing the structure of the objects provided by these functions.

```{r}
summary(dis)
```

While the `str` method shows the structure and (part of) the contents of the different items in the list.

```{r}
str(dis)
```

Both methods were modified to show the comments provided at the first lines of MODFLOW input files. These comments are compatible with the `comment` attribute in R.

```{r}
comment(dis) <- 'This is a comment for the MODFLOW discretization file'
summary(dis)
```

## Get node information

## Writing files

xxx

## Run the model

## Model performance

## Projection specification and coordinate transformation

xxx

```{r}
prj <- read_prj('LOC_2011/info.prj')
plot(bas$ibound,k=1,dis=dis,type='factor',prj=prj)+scale_fill_discrete(name='Legend',labels=c('constant head','inactive','active'))
```



## Plotting

Plotting in **RMODFLOW** is done using the generic `plot` function. For 2D plots, the output is produced by the **ggplot2** package, for 3D plots, the **rgl** package is used.

Plotting 2D arrays
------------------

The most basic 2D plot of a 2D array can be made by providing the array and additionally the corresponding *dis* file to the `plot` function.

```{r}
plot(dis$top,dis=dis)
```

For masking the inactive cells, and removing them from the plot, the `mask` argument can be used, which reads an *ibound* array (note that a 2D array is required here).

```{r}
bas <- read_bas('LOC_2011/input.bas',dis=dis)
plot(dis$top,dis=dis,mask=bas$ibound[,,1])
```

The default plot is set to use `type='fill'`, resulting in the above plots. The other possibility is `type='contour'`.

```{r}
plot(dis$top,dis=dis,mask=bas$ibound[,,1],type='contour')
```

Different plots can also be combined in **ggplot2** style with a `+`, and by using `add=TRUE` for all but the first plot.

```{r}
plot(dis$top,dis=dis,mask=bas$ibound[,,1]) + plot(dis$top,dis=dis,mask=bas$ibound[,,1],type='contour',add=TRUE)
```

Furthermore, a plot can be made in the real coordinate system, using the projection file.

```{r}
plot(dis$top,dis=dis,mask=bas$ibound[,,1],prj=prj)
```

And a target coordinate reference system can be specified for instance for combining the plot with background maps from the **OpenStreetMap** package.

```{r,eval=FALSE}
library(OpenStreetMap)
map <- openmap(c(51.3,4.8),c(51.1,5.2),zoom=11,type='osm',mergeTiles=FALSE)
library(ggplot2)
library(RTOOLZ)
autoplot(map) + plot(dis$top,dis=dis,mask=bas$ibound[,,1],prj=prj,target_CRS=osmmerc(),alpha=0.5,add=TRUE)
```

Plotting 3D arrays
------------------

Plotting for 3D arrays basically works in the same way, only the layer index `k` has to be specified.

```{r}
plot(dis$BOTM,dis=dis,mask=bas$ibound,k=1)
```

Indices `i` and `j` can be specified as well, for obtaining vertical profiles along columns or rows.

```{r}
plot(dis$BOTM,dis=dis,mask=bas$ibound,j=50)
plot(dis$BOTM,dis=dis,mask=bas$ibound,i=50)
```

3D plotting functionality
-------------------------

```{r rgl_test, webgl=TRUE, eval=FALSE}
plot(dis$top,dis=dis,mask=bas$ibound[,,1],plot3d=TRUE,height=cell_centers(dis)[,,1])
plot(dis$top,dis=dis,mask=bas$ibound[,,1],type='grid',plot3d=TRUE,height=cell_centers(dis)[,,14],add=TRUE)
#rgl.viewpoint(theta=0,phi=-5,fov=60,zoom=1)
Sys.setenv(PATH=paste("C:\\Program Files\\ImageMagick-6.7.9-Q16", Sys.getenv("PATH"), sep=";"))
movie3d(spin3d(rpm=6),duration=10,dir='animate')

# M1 <- par3d("userMatrix")
# M2 <- par3d("userMatrix")
# M3 <- par3d("userMatrix")
# M4 <- par3d("userMatrix")
# interp <-par3dinterp( userMatrix=list(M1, M2), 
#                       extrapolate="constant", method="linear")
# movie3d(interp, duration=4, fps=8, movie="biplot3d-iris")






plot(dis$top,dis=dis,mask=bas$ibound[,,1],type='fill',plot3d=TRUE,height=cell_centers(dis)[,,1])

dis <- read_dis('DAP_2012/input.dis')
bas <- read_bas('DAP_2012/input.bas',dis=dis)
```



